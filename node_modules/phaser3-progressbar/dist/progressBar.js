"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/** progress Bar class. Manages a progress bar based on the configuration. */
var ProgressBar = /** @class */ (function () {
    /** Constructor. Builds the progress bar and displays it.
     *  @param config configuration object
     *  @param context the scene to display the progress bar in */
    function ProgressBar(context, config) {
        this.context = context;
        this.config = {
            centerX: 260,
            centerY: 30,
            width: 500,
            height: 50,
            boxFill: 0x000000,
            boxFillAlpha: 1,
            boxStroke: 5,
            boxStrokeColor: 0xFFFFFF,
            boxStrokeAlpha: 1,
            boxRadius: 0,
            barFill: 0xFFFFFF,
            barFillAlpha: 1,
            barStroke: 0,
            barStrokeColor: 0xFFFFFF,
            barStrokeAlpha: 1,
            barRadius: 0,
            paddingH: 0,
            paddingV: 0,
            minBarWidth: 1
        };
        this.config = __assign({}, this.config, config);
        // Generate actual measurements and coordinates, taking into account that
        // the border in drawn in the "middle" - that is, half inside the width of
        // the shape, and half outside. This means that a shape of width 300px with
        // a border of stroke 8px will end up being 308px. We adjust for that so
        // that the total width is the requested width (save small rounding errors).
        this.boxWidth = this.config.width - this.config.boxStroke;
        this.boxHeight = this.config.height - this.config.boxStroke;
        this.boxX = this.config.centerX - (this.boxWidth / 2);
        this.boxY = this.config.centerY - (this.boxHeight / 2);
        // Then use these actual measurements to calculate the same for the bar.
        this.barWidth = this.boxWidth - this.config.barStroke - this.config.paddingH * 2;
        this.barHeight = this.boxHeight - this.config.barStroke - this.config.paddingV * 2;
        this.barX = this.boxX + this.config.paddingH;
        this.barY = this.boxY + this.config.paddingV;
        // Configure graphics style.
        this.box = context.add.graphics();
        this.bar = context.add.graphics();
        this.setStyles();
        this.drawBox();
    }
    /** Updates the progress bar with the new progress fraction.
     *  @param progress the fraction of progress, between 0 and 1 */
    ProgressBar.prototype.update = function (progress) {
        if (progress > 1)
            progress = 1;
        this.drawBar(progress);
    };
    /** Destroys the progress bar graphics. */
    ProgressBar.prototype.destroy = function () {
        this.box.destroy();
        this.bar.destroy();
    };
    /**
     * Resets the progress bar to an empty state.
     */
    ProgressBar.prototype.reset = function () {
        this.bar.clear();
        this.setStyles();
    };
    /** Sets the line and fill styles for box and bar. */
    ProgressBar.prototype.setStyles = function () {
        this.box.lineStyle(this.config.boxStroke, this.config.boxStrokeColor, this.config.boxStrokeAlpha);
        this.box.fillStyle(this.config.boxFill, this.config.boxFillAlpha);
        this.bar.lineStyle(this.config.barStroke, this.config.barStrokeColor, this.config.barFillAlpha);
        this.bar.fillStyle(this.config.barFill, this.config.barFillAlpha);
    };
    /** Draws the progress bar box. */
    ProgressBar.prototype.drawBox = function () {
        if (this.config.boxRadius > 0) {
            this.box.fillRoundedRect(this.boxX, this.boxY, this.boxWidth, this.boxHeight, this.config.boxRadius);
            this.box.strokeRoundedRect(this.boxX, this.boxY, this.boxWidth, this.boxHeight, this.config.boxRadius);
        }
        else {
            this.box.fillRect(this.boxX, this.boxY, this.boxWidth, this.boxHeight);
            this.box.strokeRect(this.boxX, this.boxY, this.boxWidth, this.boxHeight);
        }
    };
    /** Draws the progress bar. */
    ProgressBar.prototype.drawBar = function (progress) {
        if (progress * this.barWidth < this.config.minBarWidth)
            return;
        // If there is transparency in the bar, it has to be redrawn from scratch.
        if (this.config.barFillAlpha < 1 || this.config.barStrokeAlpha < 1) {
            this.bar.clear();
            this.setStyles();
        }
        if (this.config.barRadius > 0) {
            this.bar.fillRoundedRect(this.barX, this.barY, this.barWidth * progress, this.barHeight, this.config.barRadius);
            this.bar.strokeRoundedRect(this.barX, this.barY, this.barWidth * progress, this.barHeight, this.config.barRadius);
        }
        else {
            this.bar.fillRect(this.barX, this.barY, this.barWidth * progress, this.barHeight);
            this.bar.strokeRect(this.barX, this.barY, this.barWidth * progress, this.barHeight);
        }
    };
    return ProgressBar;
}());
exports.ProgressBar = ProgressBar;
